using System;
using System.Drawing;

namespace ConsoleApp2
{

    /*public class Circle
{
    private double radius;
    private string color;
    public Circle()
    {
        radius = 1;
        color = "red";
    }
    public Circle(double r)
    {
        radius = r;
        color = "red";
    }
    public double GetRadius()
    {
        return radius;
    }
    public double GetArea() { return radius * radius*Math.PI; }
    static void Main()
    {
        Circle circle = new Circle(5);
        circle.GetRadius();
        Console.WriteLine(circle.GetArea());
    }
}*/
    /*public class Rectangle
    {
        public float length;
        public float width;
        public Rectangle()
        {
            this.width = 0;
            this.length = 0;
        }
        public Rectangle(float length, float width)
        {
            this.length = length;
            this.width = width;
        }
        public float GetLength()
        { return length; }
        public float GetWidth() { return width; }
        public void SetLength(float l)
        {
            length = l;
        }
        public void SetWidth(float w)
        {
            width = w;
        }
        public float GetArea()
        {
            return length*width;
        }
        public float GetPerimeter()
        { return 2*( length+width); }
        public string ToString(float a)
        {
            return Convert.ToString(a);
        }
        static void Main()
        {
            Console.WriteLine("Enter length");
            float l=Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter width");
            float w=Convert.ToInt32(Console.ReadLine());
            Rectangle rect = new Rectangle(l,w);
            rect.SetLength(l);
            rect.SetWidth(w);
            Console.WriteLine("Area: "+rect.GetArea());
            Console.WriteLine("Perimeter: "+rect.GetPerimeter());
        }
    }*/
    /*public class Employee
    {
        int id;
        string firstName, lastName;
        int salary;
        Employee(int i, string fn, string ln, int s)
        {
            this.id = i;
            this.firstName = fn;
            this.lastName = ln;
            this.salary = s;
        }
        public int getId() { return id; }
        public string getFirstName() { return firstName; }
        public string getLastName() { return lastName; }
        public int getSalary() { return salary; }
        public int getAnnualSalary()
        {
            return salary * 12;
        }
        public int raiseSalary(int percent)
        {
            return salary+(salary * percent/100);
        }
        public void setSalary(int salary)
        { this.salary = salary; }
        public void setFirstName(string fn) { this.firstName = fn;}
        public void setLastName(string fn) {  lastName = fn;}
        public void setId(int id) { this.id = id;}
        static void Main()
        {
            Console.WriteLine("Enter ID");
            int i=Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter salary");
            int s = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter First Name");
            string f = Console.ReadLine();
            Console.WriteLine("Enter Last Name");
            string l= Console.ReadLine();
            Employee e = new Employee(i,f,l,s);
            Console.WriteLine(e.getAnnualSalary());
            Console.WriteLine(e.raiseSalary(10));
        }
    }
    class InvoiceItem
    {
        string id,desc;
        int qty;
        double unitPrice;
        InvoiceItem(string id,string desc,int qty,double unitPrice)
        {
            this.id = id;
            this.desc = desc;
            this.qty = qty;
            this.unitPrice = unitPrice;
        }
       string getId()
        {
            return id;
        }
        string getDesc()
        {
            return desc;
        }
        int getQty()
        {
            return qty;
        }
        double getUnitPrice() 
        {
            return unitPrice;
        }
        void setID(string i)
        {
            this.id = i;
        }
        void setDesc(string i)
        { this.desc = i;}
        void setUnitPrice(double i)
        { this.unitPrice = i;}
        void setQty(int i)
        { this.qty = i;}
        double getTotal()
        {
            return qty*unitPrice;
        }
        static void Main()
        {
            string i, d;
            int q;
            double u;
            Console.WriteLine("Enter id description quantity and unit price");
            i = Console.ReadLine();
            d = Console.ReadLine();
            q=Convert.ToInt32(Console.ReadLine());
            u=Convert.ToDouble(Console.ReadLine());
            InvoiceItem io = new InvoiceItem("","",0,0);
            io.setID(i);
            io.setDesc(d);
            io.setUnitPrice(u);
            io.setQty(q);
            Console.WriteLine(io.getTotal()); ;
        }
    }
    class Account
    {
        string id, name;
        int balance = 0;
        Account(string id, string name)
        {
            this.id = id;
            this.name = name;
        }
        Account(string id, string name, int balance)
        {
            this.id = id;
            this.name = name;
            this.balance = balance;
        }
        string getId() { return this.id; }
        public string getName() { return this.name; }
        public int getBalance() { return this.balance; } public void setBalance(int balance) {  this.balance = balance; }
        public void setId(string value)
        {
            this.id = value;
        }
        void setName(string value)
        { this.name = value;}
        int Credit(int amount)
        {
            return amount + balance;
        }
        int Debit(int amount)
        {
            if (amount <= balance)
                return amount - balance;
            else
                Console.WriteLine("Amount exceeds balance");
            return balance;
        }
        int TransferTo(Account a,int amount)
        {
            if (amount <= balance)
                Console.WriteLine("Amount tranferred to : " + a.name);
            else
                Console.WriteLine("Amount exceeds balance");
            return balance;
        }



        static void Main()
        {
            Console.WriteLine("Enter Account number, Account Holder Name and Balance");
            string d = Console.ReadLine(); int am;
            string n = Console.ReadLine();
            int bal = Convert.ToInt32(Console.ReadLine());
            Account a1 = new Account(d, n, bal);
            Console.WriteLine("1.DEBIT\t2.CREDIT\t3.Transfer");
            int ch = Convert.ToInt32(Console.ReadLine());
            switch (ch)
            {
                case 1:
                    Console.WriteLine("Enter amount to debit");
                    am = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine("New Balance is : " + a1.Debit(am));
                    break;
                case 2:
                    Console.WriteLine("Enter amount to credit");
                    am = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine("New Balance is : " + a1.Credit(am));
                    break;
                case 3:
                    Console.WriteLine("Enter Account Number,Name");
                    d = Console.ReadLine();
                    n = Console.ReadLine();
                    Account a2 = new Account(d, n);
                    Console.WriteLine("Enter amount to transfer");
                    am = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine("Balance: " + a1.TransferTo(a2, am));
                    break;
                    //default: Console.WriteLine("Invalid Option");
            }
        }

    }
    class Date
    {
        int day, year, month;
        Date(int day, int year, int month)
        {
            this.day = day;
            this.year = year;
            this.month = month;
        }
        int getDay()
        { return day; }
        public int getYear() { return year; }
        public int getMonth() { return month; }
        void setDay(int value)
        {
            day = value;
        }
        void setYear(int value)
        { year = value; }
        void setMonth(int value)
        { month = value; }
        void setDate(int d, int m, int y)
        {
            setDay(d);
            setYear(y);
            setMonth(m);
        }
        string ToString()
        {
            return Convert.ToString(day+"/"+month+"/"+year);
        }
        public static void Main(String[] args)
        {
            // Test constructor and toString()
            Date d1 = new Date(1, 2, 2014);
            Console.WriteLine(d1);  // toString()

            // Test Setters and Getters
            d1.setMonth(12);
            d1.setDay(9);
            d1.setYear(2099);
            Console.WriteLine(d1.ToString());  // toString()
            Console.WriteLine("Month: " + d1.getMonth());
            Console.WriteLine("Day: " + d1.getDay());
            Console.WriteLine("Year: " + d1.getYear());

            // Test setDate()
            d1.setDate(3, 4, 2016);
           Console.WriteLine(d1.ToString());  // toString()

        }
    }

        public class Time
        {
            private int hour;
            private int minute;
            private int second;

            public Time(int hour, int minute, int second)
            {
                SetTime(hour, minute, second);
            }

            public void SetHour(int hour)
            {
                if (hour >= 0 && hour < 24)
                {
                    this.hour = hour;
                }
            }

            public int GetHour()
            {
                return hour;
            }

            public void SetMinute(int minute)
            {
                if (minute >= 0 && minute < 60)
                {
                    this.minute = minute;
                }
            }

            public int GetMinute()
            {
                return minute;
            }

            public void SetSecond(int second)
            {
                if (second >= 0 && second < 60)
                {
                    this.second = second;
                }
            }

            public int GetSecond()
            {
                return second;
            }

            public void SetTime(int hour, int minute, int second)
            {
                SetHour(hour);
                SetMinute(minute);
                SetSecond(second);
            }

            public Time NextSecond()
            {
                second++;
                if (second == 60)
                {
                    second = 0;
                    minute++;
                    if (minute == 60)
                    {
                        minute = 0;
                        hour++;
                        if (hour == 24)
                        {
                            hour = 0;
                        }
                    }
                }
                return this;
            }

            public Time PreviousSecond()
            {
                second--;
                if (second < 0)
                {
                    second = 59;
                    minute--;
                    if (minute < 0)
                    {
                        minute = 59;
                        hour--;
                        if (hour < 0)
                        {
                            hour = 23;
                        }
                    }
                }
                return this;
            }

            public override string ToString()
            {
                return string.Format("{0:D2}:{1:D2}:{2:D2}", hour, minute, second);
            }
        }

        public class TestMain
        {
            public static void Main(string[] args)
            {
                // Test constructors and ToString()
                Time t1 = new Time(1, 2, 3);
                Console.WriteLine(t1);  // ToString()

                // Test Setters and Getters
                t1.SetHour(4);
                t1.SetMinute(5);
                t1.SetSecond(6);
                Console.WriteLine(t1);  // ToString()
                Console.WriteLine("Hour: " + t1.GetHour());
                Console.WriteLine("Minute: " + t1.GetMinute());
                Console.WriteLine("Second: " + t1.GetSecond());

                // Test SetTime()
                t1.SetTime(23, 59, 58);
                Console.WriteLine(t1);  // ToString()

                // Test NextSecond();
                Console.WriteLine(t1.NextSecond());
                Console.WriteLine(t1.NextSecond().NextSecond());

                // Test PreviousSecond()
                Console.WriteLine(t1.PreviousSecond());
                Console.WriteLine(t1.PreviousSecond().PreviousSecond());
            }
        }

     /*
    public class Ball
        {
            private float x;
            private float y;
            private int radius;
            private float xDelta;
            private float yDelta;

            public Ball(float x, float y, int radius, float xDelta, float yDelta)
            {
                this.x = x;
                this.y = y;
                this.radius = radius;
                this.xDelta = xDelta;
                this.yDelta = yDelta;
            }

            public void SetX(float x)
            {
                this.x = x;
            }

            public float GetX()
            {
                return x;
            }

            public void SetY(float y)
            {
                this.y = y;
            }

            public float GetY()
            {
                return y;
            }

            public void SetRadius(int radius)
            {
                this.radius = radius;
            }

            public int GetRadius()
            {
                return radius;
            }

            public void SetXDelta(float xDelta)
            {
                this.xDelta = xDelta;
            }

            public float GetXDelta()
            {
                return xDelta;
            }

            public void SetYDelta(float yDelta)
            {
                this.yDelta = yDelta;
            }

            public float GetYDelta()
            {
                return yDelta;
            }

            public void ReflectHorizontal()
            {
                xDelta = -xDelta;
            }

            public void ReflectVertical()
            {
                yDelta = -yDelta;
            }

            public void Move()
            {
                x += xDelta;
                y += yDelta;
            }

            public override string ToString()
            {
                return $"Ball[({x},{y}),speed=({xDelta},{yDelta})]";
            }
        }

        public class TestMain
        {
            public static void Main(string[] args)
            {
                // Test constructor and ToString()
                Ball ball = new Ball(1.1f, 2.2f, 10, 3.3f, 4.4f);
                Console.WriteLine(ball);  // ToString()

                // Test Setters and Getters
                ball.SetX(80.0f);
                ball.SetY(35.0f);
                ball.SetRadius(5);
                ball.SetXDelta(4.0f);
                ball.SetYDelta(6.0f);
                Console.WriteLine(ball);  // ToString()
                Console.WriteLine("x is: " + ball.GetX());
                Console.WriteLine("y is: " + ball.GetY());
                Console.WriteLine("radius is: " + ball.GetRadius());
                Console.WriteLine("xDelta is: " + ball.GetXDelta());
                Console.WriteLine("yDelta is: " + ball.GetYDelta());

                // Bounce the ball within the boundary
                float xMin = 0.0f;
                float xMax = 100.0f;
                float yMin = 0.0f;
                float yMax = 50.0f;
                for (int i = 0; i < 15; i++)
                {
                    ball.Move();
                    Console.WriteLine(ball);
                    float xNew = ball.GetX();
                    float yNew = ball.GetY();
                    int radius = ball.GetRadius();
                    // Check boundary value to bounce back
                    if ((xNew + radius) > xMax || (xNew - radius) < xMin)
                    {
                        ball.ReflectHorizontal();
                    }
                    if ((yNew + radius) > yMax || (yNew - radius) < yMin)
                    {
                        ball.ReflectVertical();
                    }
                }
            }
        }

    class Author
        {
            private string name;
            private string email;

            public Author(string name, string email)
            {
                this.name = name;
                this.email = email;
            }

            public string GetName()
            {
                return name;
            }

            public string GetEmail()
            {
                return email;
            }

            public void SetEmail(string email)
            {
                this.email = email;
            }

            public override string ToString()
            {
                return $"Author[name={name},email={email}]";
            }
        }

        class Book
        {
            private string isbn;
            private string name;
            private Author author;
            private double price;
            private int qty;

            public Book(string isbn, string name, Author author, double price, int qty)
            {
                this.isbn = isbn;
                this.name = name;
                this.author = author;
                this.price = price;
                this.qty = qty;
            }

            public string GetIsbn()
            {
                return isbn;
            }

            public string GetName()
            {
                return name;
            }

            public double GetPrice()
            {
                return price;
            }

            public void SetPrice(double price)
            {
                this.price = price;
            }

            public int GetQty()
            {
                return qty;
            }

            public void SetQty(int qty)
            {
                this.qty = qty;
            }

            public Author GetAuthor()
            {
                return author;
            }

            public string GetAuthorName()
            {
                return author.GetName();
            }

            public override string ToString()
            {
                return $"Book[isbn={isbn},name={name},{author},price={price},qty={qty}]";
            }
        }

        class TestMain
        {
            static void Main(string[] args)
            {
                // Test Author class
                Author a1 = new Author("Tan Ah Teck", "ahteck@nowhere.com");
                Console.WriteLine(a1);

                a1.SetEmail("ahteck@somewhere.com");
                Console.WriteLine(a1);
                Console.WriteLine("name is: " + a1.GetName());
                Console.WriteLine("email is: " + a1.GetEmail());

                // Test Book class
                Book b1 = new Book("12345", "Java for dummies", a1, 8.8, 88);
                Console.WriteLine(b1);

                b1.SetPrice(9.9);
                b1.SetQty(99);
                Console.WriteLine(b1);
                Console.WriteLine("isbn is: " + b1.GetIsbn());
                Console.WriteLine("name is: " + b1.GetName());
                Console.WriteLine("price is: " + b1.GetPrice());
                Console.WriteLine("qty is: " + b1.GetQty());
                Console.WriteLine("author is: " + b1.GetAuthor());
                Console.WriteLine("author's name: " + b1.GetAuthorName());
                Console.WriteLine("author's name: " + b1.GetAuthor().GetName());
                Console.WriteLine("author's email: " + b1.GetAuthor().GetEmail());
            }
        }



    class Customer
        {
            private int id;
            private string name;
            private int discount;

            public Customer(int id, string name, int discount)
            {
                this.id = id;
                this.name = name;
                this.discount = discount;
            }

            public int GetId()
            {
                return id;
            }

            public string GetName()
            {
                return name;
            }

            public int GetDiscount()
            {
                return discount;
            }

            public void SetDiscount(int discount)
            {
                this.discount = discount;
            }

            public override string ToString()
            {
                return $"{name}({id})({discount}%)";
            }
        }

        class Invoice
        {
            private int id;
            private Customer customer;
            private double amount;

            public Invoice(int id, Customer customer, double amount)
            {
                this.id = id;
                this.customer = customer;
                this.amount = amount;
            }

            public int GetId()
            {
                return id;
            }

            public Customer GetCustomer()
            {
                return customer;
            }

            public double GetAmount()
            {
                return amount;
            }

            public void SetAmount(double amount)
            {
                this.amount = amount;
            }

            public int GetCustomerId()
            {
                return customer.GetId();
            }

            public string GetCustomerName()
            {
                return customer.GetName();
            }

            public int GetCustomerDiscount()
            {
                return customer.GetDiscount();
            }

            public double GetAmountAfterDiscount()
            {
                return amount - (amount * customer.GetDiscount() / 100.0);
            }

            public override string ToString()
            {
                return $"Invoice[id={id},customer={customer},amount={amount}]";
            }
        }

        class TestMain
        {
            static void Main(string[] args)
            {
                // Test Customer class
                Customer c1 = new Customer(88, "Tan Ah Teck", 10);
                Console.WriteLine(c1);

                c1.SetDiscount(8);
                Console.WriteLine(c1);
                Console.WriteLine("id is: " + c1.GetId());
                Console.WriteLine("name is: " + c1.GetName());
                Console.WriteLine("discount is: " + c1.GetDiscount());

                // Test Invoice class
                Invoice inv1 = new Invoice(101, c1, 888.8);
                Console.WriteLine(inv1);

                inv1.SetAmount(999.9);
                Console.WriteLine(inv1);
                Console.WriteLine("id is: " + inv1.GetId());
                Console.WriteLine("customer is: " + inv1.GetCustomer());
                Console.WriteLine("amount is: " + inv1.GetAmount());
                Console.WriteLine("customer's id is: " + inv1.GetCustomerId());
                Console.WriteLine("customer's name is: " + inv1.GetCustomerName());
                Console.WriteLine("customer's discount is: " + inv1.GetCustomerDiscount());
                Console.WriteLine("amount after discount is: " + inv1.GetAmountAfterDiscount().ToString("0.00"));
            }
        }

    class Author
        {
            private string name;
            private string email;
            private char gender;

            public Author(string name, string email, char gender)
            {
                this.name = name;
                this.email = email;
                this.gender = gender;
            }

            public string GetName()
            {
                return name;
            }

            public string GetEmail()
            {
                return email;
            }

            public char GetGender()
            {
                return gender;
            }

            public override string ToString()
            {
                return $"Author[name={name},email={email},gender={gender}]";
            }
        }

        class Book
        {
            private string name;
            private Author author;
            private double price;
            private int qty;

            public Book(string name, Author author, double price)
            {
                this.name = name;
                this.author = author;
                this.price = price;
                this.qty = 0; // Default qty value
            }

            public Book(string name, Author author, double price, int qty)
            {
                this.name = name;
                this.author = author;
                this.price = price;
                this.qty = qty;
            }

            public string GetName()
            {
                return name;
            }

            public Author GetAuthor()
            {
                return author;
            }

            public double GetPrice()
            {
                return price;
            }

            public void SetPrice(double price)
            {
                this.price = price;
            }

            public int GetQty()
            {
                return qty;
            }

            public void SetQty(int qty)
            {
                this.qty = qty;
            }

            public override string ToString()
            {
                return $"Book[name={name},{author},price={price},qty={qty}]";
            }

            public string GetAuthorName()
            {
                return author.GetName();
            }

            public string GetAuthorEmail()
            {
                return author.GetEmail();
            }

            public char GetAuthorGender()
            {
                return author.GetGender();
            }
        }

        class TestBook
        {
            static void Main(string[] args)
            {
                // Construct an author instance
                Author ahTeck = new Author("Tan Ah Teck", "ahteck@nowhere.com", 'm');
                Console.WriteLine(ahTeck);  // Author's toString()

                Book dummyBook = new Book("Java for dummy", ahTeck, 19.95, 99);  // Test Book's Constructor
                Console.WriteLine(dummyBook);  // Test Book's toString()

                // Test Getters and Setters
                dummyBook.SetPrice(29.95);
                dummyBook.SetQty(28);
                Console.WriteLine("name is: " + dummyBook.GetName());
                Console.WriteLine("price is: " + dummyBook.GetPrice());
                Console.WriteLine("qty is: " + dummyBook.GetQty());
                Console.WriteLine("Author is: " + dummyBook.GetAuthor());  // Author's toString()
                Console.WriteLine("Author's name is: " + dummyBook.GetAuthorName());
                Console.WriteLine("Author's email is: " + dummyBook.GetAuthorEmail());

                // Use an anonymous instance of Author to construct a Book instance
                Book anotherBook = new Book("more Java",
                    new Author("Paul Tan", "paul@somewhere.com", 'm'), 29.95);
                Console.WriteLine(anotherBook);  // toString()

                // Print name and email of author from a Book instance
                Console.WriteLine("Author's name from Book: " + dummyBook.GetAuthorName());
                Console.WriteLine("Author's email from Book: " + dummyBook.GetAuthorEmail());
            }
        }

        */



    class Customer
    {
        private int id;
        private string name;
        private char gender;
        private int discount;

        public Customer(int id, string name, char gender, int discount)
        {
            this.id = id;
            this.name = name;
            this.gender = gender;
            this.discount = discount;
        }

        public int GetId()
        {
            return id;
        }

        public string GetName()
        {
            return name;
        }

        public char getGender()
        {
            return gender;
        }

        public int GetDiscount()
        {
            return discount;
        }

        public void SetDiscount(int discount)
        {
            this.discount = discount;
        }

        public override string ToString()
        {
            return $"{name}({id}){gender}({discount}%)";
        }
    }

    class Account
    {
        private int id;
        private Customer customer;
        private double balance;
        int amount = 10000;

        public Account(int id, Customer customer, double balance)
        {
            this.id = id;
            this.customer = customer;
            this.balance = balance;
        }

        public int GetId()
        {
            return id;
        }

        public Customer GetCustomer()
        {
            return customer;
        }

        public double GetBalance()
        {
            return balance;
        }

        public void SetBalance(double balance)
        {
            this.balance = balance;
        }

        public int GetCustomerId()
        {
            return customer.GetId();
        }

        public string GetCustomerName()
        {
            return customer.GetName();
        }

        public int GetCustomerDiscount()
        {
            return customer.GetDiscount();
        }

        public double Getdeposite()
        {
            return (amount + customer.GetDiscount());
        }

        public override string ToString()
        {
            return $"Invoice[id={id},customer={customer},amount={amount}]";
        }
    }

    class TestMain2
    {
        static void Main(string[] args)
        {
            // Test Customer class
            Customer c1 = new Customer(01, "Tanya", 'f', 10);
            Console.WriteLine(c1);

            c1.SetDiscount(8);
            Console.WriteLine(c1);
            Console.WriteLine("id is: " + c1.GetId());
            Console.WriteLine("name is: " + c1.GetName());
            Console.WriteLine("discount is: " + c1.GetDiscount());

            // Test Invoice class
            Account inv1 = new Account(101, c1, 888.8);
            Console.WriteLine(inv1);

            //inv1.SetAmount(999.9);
            Console.WriteLine(inv1);
            Console.WriteLine("id is: " + inv1.GetId());
            Console.WriteLine("customer is: " + inv1.GetCustomer());
            Console.WriteLine("customer's id is: " + inv1.GetCustomerId());
            Console.WriteLine("customer's name is: " + inv1.GetCustomerName());

        }
    }

class MyPoint
    {
        private int x;
        private int y;

        public MyPoint()
        {
            this.x = 0;
            this.y = 0;
        }

        public MyPoint(int x, int y)
        {
            this.x = x;
            this.y = y;
        }

        public int X
        {
            get { return x; }
            set { x = value; }
        }

        public int Y
        {
            get { return y; }
            set { y = value; }
        }

        public void SetXY(int x, int y)
        {
            this.x = x;
            this.y = y;
        }

        public int[] GetXY()
        {
            return new int[] { x, y };
        }

        public double Distance(int x, int y)
        {
            int xDiff = this.x - x;
            int yDiff = this.y - y;
            return Math.Sqrt(xDiff * xDiff + yDiff * yDiff);
        }

        public double Distance(MyPoint another)
        {
            int xDiff = this.x - another.x;
            int yDiff = this.y - another.y;
            return Math.Sqrt(xDiff * xDiff + yDiff * yDiff);
        }

        public double Distance()
        {
            return Math.Sqrt(x * x + y * y);
        }

        public override string ToString()
        {
            return $"({x}, {y})";
        }
    }

    class TestMyPoint
    {
        static void Main(string[] args)
        {
            MyPoint p1 = new MyPoint();
            Console.WriteLine(p1);
            p1.X = 8;
            p1.Y = 6;
            Console.WriteLine("x is: " + p1.X);
            Console.WriteLine("y is: " + p1.Y);
            p1.SetXY(3, 0);
            Console.WriteLine(p1.GetXY()[0]);
            Console.WriteLine(p1.GetXY()[1]);
            Console.WriteLine(p1);

            MyPoint p2 = new MyPoint(0, 4);
            Console.WriteLine(p2);

            Console.WriteLine(p1.Distance(p2));
            Console.WriteLine(p2.Distance(p1));
            Console.WriteLine(p1.Distance(5, 6));
            Console.WriteLine(p1.Distance());

            MyPoint[] points = new MyPoint[10];
            for (int i = 0; i < points.Length; i++)
            {
                points[i] = new MyPoint(i + 1, i + 1);
            }

            foreach (MyPoint point in points)
            {
                Console.WriteLine(point);
            }
        }
    }

    class MyLine
    {
        private MyPoint begin;
        private MyPoint end;

        public MyLine(int x1, int y1, int x2, int y2)
        {
            begin = new MyPoint(x1, y1);
            end = new MyPoint(x2, y2);
        }

        public MyLine(MyPoint begin, MyPoint end)
        {
            this.begin = begin;
            this.end = end;
        }

        public MyPoint Begin
        {
            get { return begin; }
            set { begin = value; }
        }

        public MyPoint End
        {
            get { return end; }
            set { end = value; }
        }

        public int BeginX
        {
            get { return begin.X; }
            set { begin.X = value; }
        }

        public int BeginY
        {
            get { return begin.Y; }
            set { begin.Y = value; }
        }

        public int EndX
        {
            get { return end.X; }
            set { end.X = value; }
        }

        public int EndY
        {
            get { return end.Y; }
            set { end.Y = value; }
        }

        public void SetBeginXY(int x, int y)
        {
            begin.SetXY(x, y);
        }

        public void SetEndXY(int x, int y)
        {
            end.SetXY(x, y);
        }

        public double Length
        {
            get { return begin.Distance(end); }
        }

        public override string ToString()
        {
            return $"Line from {begin} to {end}";
        }
    }

    class TestMyLine
    {
        static void Main(string[] args)
        {
            MyLine line1 = new MyLine(1, 2, 3, 4);
            Console.WriteLine(line1);

            MyPoint begin = new MyPoint(5, 6);
            MyPoint end = new MyPoint(7, 8);
            MyLine line2 = new MyLine(begin, end);
            Console.WriteLine(line2);

            line1.BeginX = 0;
            line1.BeginY = 0;
            line1.EndX = 10;
            line1.EndY = 10;
            Console.WriteLine($"Line1's begin: {line1.Begin}");
            Console.WriteLine($"Line1's end: {line1.End}");

            line1.SetBeginXY(1, 1);
            line1.SetEndXY(9, 9);
            Console.WriteLine(line1);

            Console.WriteLine($"Line1's length: {line1.Length}");
            Console.WriteLine($"Line2's length: {line2.Length}");
        }
    }

    class MyCircle
    {
        private MyPoint center;
        private int radius;

        public MyCircle(int x, int y, int radius)
        {
            center = new MyPoint(x, y);
            this.radius = radius;
        }

        public MyCircle(MyPoint center, int radius)
        {
            this.center = center;
            this.radius = radius;
        }

        public MyCircle()
        {
            center = new MyPoint(0, 0);
            this.radius = 1;
        }

        public int GetCenterX
        {
            get { return center.X; }
        }

        public int GetCenterY
        {
            get { return center.Y; }
        }

        public MyPoint Center
        {
            get { return center; }
            set { center = value; }
        }

        public int Radius
        {
            get { return radius; }
            set { radius = value; }
        }

        public double GetArea()
        {
            return Math.PI * radius * radius;
        }

        public double GetCircumference()
        {
            return 2 * Math.PI * radius;
        }

        public double Distance(MyCircle another)
        {
            return center.Distance(another.center);
        }

        public override string ToString()
        {
            return $"MyCircle[radius={radius},center={center}]";
        }
    }

    class TestMyCircle
    {
        static void Main(string[] args)
        {
            MyCircle circle1 = new MyCircle(3, 4, 5);
            Console.WriteLine(circle1);

            MyPoint center = new MyPoint(1, 2);
            MyCircle circle2 = new MyCircle(center, 6);
            Console.WriteLine(circle2);

            MyCircle circle3 = new MyCircle();
            circle3.Radius = 2;
            Console.WriteLine($"Circle3's center: ({circle3.GetCenterX},{circle3.GetCenterY})");
            Console.WriteLine($"Circle3's area: {circle3.GetArea()}");
            Console.WriteLine($"Circle3's circumference: {circle3.GetCircumference()}");

            Console.WriteLine($"Distance between circle1 and circle2: {circle1.Distance(circle2)}");
        }
    }


    class MyTriangle
    {
        private MyPoint v1;
        private MyPoint v2;
        private MyPoint v3;

        public MyTriangle(int x1, int y1, int x2, int y2, int x3, int y3)
        {
            v1 = new MyPoint(x1, y1);
            v2 = new MyPoint(x2, y2);
            v3 = new MyPoint(x3, y3);
        }

        public MyTriangle(MyPoint v1, MyPoint v2, MyPoint v3)
        {
            this.v1 = v1;
            this.v2 = v2;
            this.v3 = v3;
        }

        public MyPoint V1
        {
            get { return v1; }
            set { v1 = value; }
        }

        public MyPoint V2
        {
            get { return v2; }
            set { v2 = value; }
        }

        public MyPoint V3
        {
            get { return v3; }
            set { v3 = value; }
        }

        public double GetPerimeter()
        {
            double side1 = v1.Distance(v2);
            double side2 = v2.Distance(v3);
            double side3 = v3.Distance(v1);
            return side1 + side2 + side3;
        }

        public void PrintType()
        {
            double side1 = v1.Distance(v2);
            double side2 = v2.Distance(v3);
            double side3 = v3.Distance(v1);

            if (side1 == side2 && side2 == side3)
                Console.WriteLine("equilateral");
            else if (side1 == side2 || side2 == side3 || side3 == side1)
                Console.WriteLine("isosceles");
            else
                Console.WriteLine("scalene");
        }

        public override string ToString()
        {
            return $"MyTriangle[v1={v1},v2={v2},v3={v3}]";
        }
    }

    class TestMyTriangle
    {
        static void Main(string[] args)
        {
            MyTriangle triangle1 = new MyTriangle(0, 0, 3, 0, 0, 4);
            Console.WriteLine(triangle1);
            Console.WriteLine($"Perimeter: {triangle1.GetPerimeter()}");
            Console.Write("Type: ");
            triangle1.PrintType();

            MyPoint v1 = new MyPoint(1, 1);
            MyPoint v2 = new MyPoint(1, 4);
            MyPoint v3 = new MyPoint(5, 1);
            MyTriangle triangle2 = new MyTriangle(v1, v2, v3);
            Console.WriteLine(triangle2);
            Console.WriteLine($"Perimeter: {triangle2.GetPerimeter()}");
            Console.Write("Type: ");
            triangle2.PrintType();
        }
    }

class MyRectangle
    {
        private MyPoint topLeft;
        private MyPoint bottomRight;

        public MyRectangle(int x1, int y1, int x2, int y2)
        {
            topLeft = new MyPoint(x1, y1);
            bottomRight = new MyPoint(x2, y2);
        }

        public MyRectangle(MyPoint topLeft, MyPoint bottomRight)
        {
            this.topLeft = topLeft;
            this.bottomRight = bottomRight;
        }

        public MyPoint TopLeft
        {
            get { return topLeft; }
            set { topLeft = value; }
        }

        public MyPoint BottomRight
        {
            get { return bottomRight; }
            set { bottomRight = value; }
        }

        public int Width
        {
            get { return Math.Abs(bottomRight.X - topLeft.X); }
        }

        public int Height
        {
            get { return Math.Abs(bottomRight.Y - topLeft.Y); }
        }

        public double GetArea()
        {
            return Width * Height;
        }

        public double GetPerimeter()
        {
            return 2 * (Width + Height);
        }

        public override string ToString()
        {
            return $"MyRectangle[topLeft={topLeft},bottomRight={bottomRight}]";
        }
    }

    class TestMyRectangle
    {
        static void Main(string[] args)
        {
            MyRectangle rectangle1 = new MyRectangle(1, 4, 5, 1);
            Console.WriteLine(rectangle1);
            Console.WriteLine($"Width: {rectangle1.Width}");
            Console.WriteLine($"Height: {rectangle1.Height}");
            Console.WriteLine($"Area: {rectangle1.GetArea()}");
            Console.WriteLine($"Perimeter: {rectangle1.GetPerimeter()}");

            MyPoint topLeft = new MyPoint(2, 6);
            MyPoint bottomRight = new MyPoint(8, 2);
            MyRectangle rectangle2 = new MyRectangle(topLeft, bottomRight);
            Console.WriteLine(rectangle2);
            Console.WriteLine($"Width: {rectangle2.Width}");
            Console.WriteLine($"Height: {rectangle2.Height}");
            Console.WriteLine($"Area: {rectangle2.GetArea()}");
            Console.WriteLine($"Perimeter: {rectangle2.GetPerimeter()}");
        }
    }

class MyComplex
    {
        private double real;
        private double imag;

        public MyComplex(double real, double imag)
        {
            this.real = real;
            this.imag = imag;
        }

        public MyComplex()
        {
            this.real = 0.0;
            this.imag = 0.0;
        }

        public double Real
        {
            get { return real; }
            set { real = value; }
        }

        public double Imaginary
        {
            get { return imag; }
            set { imag = value; }
        }

        public void SetValue(double real, double imag)
        {
            this.real = real;
            this.imag = imag;
        }

        public override string ToString()
        {
            if (imag >= 0)
                return $"({real} + {imag}i)";
            else
                return $"({real} - {-imag}i)";
        }

        public bool IsReal()
        {
            return (imag == 0);
        }

        public bool IsImaginary()
        {
            return (real == 0 && imag != 0);
        }

        public bool Equals(double real, double imag)
        {
            return (this.real == real && this.imag == imag);
        }

        public bool Equals(MyComplex another)
        {
            return (this.real == another.real && this.imag == another.imag);
        }

        public double Magnitude()
        {
            return Math.Sqrt(real * real + imag * imag);
        }

        public double Argument()
        {
            return Math.Atan2(imag, real);
        }

        public MyComplex Add(MyComplex right)
        {
            real += right.real;
            imag += right.imag;
            return this;
        }

        public MyComplex Subtract(MyComplex right)
        {
            real -= right.real;
            imag -= right.imag;
            return this;
        }

        public MyComplex Multiply(MyComplex right)
        {
            double newReal = real * right.real - imag * right.imag;
            double newImag = real * right.imag + imag * right.real;
            real = newReal;
            imag = newImag;
            return this;
        }

        public MyComplex Divide(MyComplex right)
        {
            double denominator = right.real * right.real + right.imag * right.imag;
            double newReal = (real * right.real + imag * right.imag) / denominator;
            double newImag = (imag * right.real - real * right.imag) / denominator;
            real = newReal;
            imag = newImag;
            return this;
        }

        public MyComplex Conjugate()
        {
            imag = -imag;
            return this;
        }
    }


    class MyComplexApp
    {
        static void Main(string[] args)
        {
            Console.Write("Enter complex number 1 (real and imaginary part): ");
            double real1 = Convert.ToDouble(Console.ReadLine());
            double imag1 = Convert.ToDouble(Console.ReadLine());
            MyComplex complex1 = new MyComplex(real1, imag1);
            Console.WriteLine("Number 1 is: " + complex1);
            Console.WriteLine(complex1 + " is " + (complex1.IsReal() ? "a pure real" : "NOT a pure real") + " number");
            Console.WriteLine(complex1 + " is " + (complex1.IsImaginary() ? "a pure imaginary" : "NOT a pure imaginary") + " number");

            Console.Write("\nEnter complex number 2 (real and imaginary part): ");
            double real2 = Convert.ToDouble(Console.ReadLine());
            double imag2 = Convert.ToDouble(Console.ReadLine());
            MyComplex complex2 = new MyComplex(real2, imag2);
            Console.WriteLine("Number 2 is: " + complex2);
            Console.WriteLine(complex2 + " is " + (complex2.IsReal() ? "a pure real" : "NOT a pure real") + " number");
            Console.WriteLine(complex2 + " is " + (complex2.IsImaginary() ? "a pure imaginary" : "NOT a pure imaginary") + " number");

            Console.WriteLine("\n" + complex1 + " is " + (complex1.Equals(real2, imag2) ? "equal to" : "NOT equal to") + " " + complex2);
            MyComplex sum = new MyComplex();
            sum = complex1.Add(complex2);
            Console.WriteLine(complex1 + " + " + complex2 + " = " + sum);

            Console.Write("Enter complex number 3 (real and imaginary part): ");
            double real3 = Convert.ToDouble(Console.ReadLine());
            double imag3 = Convert.ToDouble(Console.ReadLine());
            MyComplex complex3 = new MyComplex(real3, imag3);
            MyComplex result = complex1.Add(complex2).Subtract(complex3);
            Console.WriteLine("(" + complex1 + " + " + complex2 + ") - " + complex3 + " = " + result);

            MyComplex result2 = complex1.Multiply(complex2).Divide(complex3);
            Console.WriteLine("(" + complex1 + " * " + complex2 + ") / " + complex3 + " = " + result2);

            MyComplex conjugate = complex1.Conjugate();
            Console.WriteLine("Conjugate of " + complex1 + " = " + conjugate);
        }
    }

    /*

    public class MyPolynomial
    {
        double coeffs;
        int degree;
        string String;
        public MyPolynomial(double coeffs)
        {
            this.coeffs = coeffs;
        }

        MyPolynomial(double coeffs, int degree, string String)
        {
            this.coeffs = coeffs;
            this.degree = degree;
            this.String = String;
        }
        int getdegree() { return this.degree; }
        public string getString() { return this.String; }
        public double getCoefficients() { return this.coeffs; }

        public void setdegree(int degree) { this.degree = degree; }
        public void setString(string String) { this.String = String; }
        public void setCoefficients(double coeffs) { this.coeffs = coeffs; }

        double Evaluate(double x)
        {
            return x;
        }

        int ToAdd(double x, double coeffs, int degree)
        {
            return (int)(x + coeffs);
        }

        int ToMultiply(double x)
        {
            return degree;
        }
        static void Main(string[] args)
        {
            double x;
            Console.WriteLine("enter coeffs, degree, String, x");
            double coeffs = Convert.ToInt32(Console.ReadLine());
            int degree = Convert.ToInt32(Console.ReadLine());
            string String = Console.ReadLine();
            MyPolynomial io = new MyPolynomial(coeffs, degree, String);
            io.setdegree(degree);
            io.setString(String);
            io.setCoefficients(coeffs);
            Console.WriteLine(io.Evaluate(coeffs));
            Console.WriteLine(io.ToMultiply(coeffs));
        }

    }



    public class MyTime
    {
        private int hour;
        private int minute;
        private int second;

        public MyTime()
        {
            hour = 0;
            minute = 0;
            second = 0;
        }

        public MyTime(int hour, int minute, int second)
        {
            this.hour = hour;
            this.minute = minute;
            this.second = second;
        }

        public void setTime(int hour, int minute, int second)
        {
            this.hour = hour;
            this.minute = minute;
            this.second = second;
        }

        public int getHour()
        {
            return hour;
        }

        public int getMinute()
        {
            return minute;
        }

        public int getSecond()
        {
            return second;
        }

        public void setHour(int hour)
        {
            this.hour = hour;
        }

        public void setMinute(int minute)
        {
            this.minute = minute;
        }

        public void setSecond(int second)
        {
            this.second = second;
        }

        public override string ToString()
        {
            return $"{hour:D2}:{minute:D2}:{second:D2}";
        }

        public MyTime nextSecond()
        {
            second++;
            if (second == 60)
            {
                second = 0;
                nextMinute();
            }
            return this;
        }

        public MyTime nextMinute()
        {
            minute++;
            if (minute == 60)
            {
                minute = 0;
                nextHour();
            }
            return this;
        }
        public MyTime nextHour()
        {
            hour++;
            if (hour == 24)
            {
                hour = 0;
            }
            return this;
        }
        public MyTime previousSecond()
        {
            second--;
            if (second < 0)
            {
                second = 59;
                previousMinute();
            }
            return this;
        }

        public MyTime previousMinute()
        {
            minute--;
            if (minute < 0)
            {
                minute = 59;
                previousHour();
            }
            return this;
        }

        public MyTime previousHour()
        {
            hour--;
            if (hour < 0)
            {
                hour = 23;
            }
            return this;
        }
    }
    class program
    {
        static void Main(string[] args)
        {
            MyTime time = new MyTime(12, 13, 24);
            Console.WriteLine("Current time: " + time);

            MyTime nextMinute = time.nextMinute();
            Console.WriteLine("Next minute: " + nextMinute);

            MyTime previousHour = time.previousHour();
            Console.WriteLine("Previous hour: " + previousHour);
        }
    }



    //3rd program
    public class MyDate
    {
        private int year;
        private int month;
        private int day;

        private static readonly string[] MONTHS = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
        private static readonly string[] DAYS = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
        private static readonly int[] DAYS_IN_MONTHS = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

        public static bool isLeapYear(int year)
        {
            return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
        }

        public static bool isValidDate(int year, int month, int day)
        {
            if (year < 1 || month < 1 || month > 12 || day < 1)
                return false;
            int daysInMonth = DAYS_IN_MONTHS[month - 1];
            if (month == 2 && isLeapYear(year))
                daysInMonth++;

            return day <= daysInMonth;
        }

        public static int getDayOfWeek(int year, int month, int day)
        {
            DateTime date = new DateTime(year, month, day);
            return (int)date.DayOfWeek;
        }

        public MyDate(int year, int month, int day)
        {
            setDate(year, month, day);
        }

        public void setDate(int year, int month, int day)
        {
            if (isValidDate(year, month, day))
            {
                this.year = year;
                this.month = month;
                this.day = day;
            }
            else
            {
                throw new ArgumentException("Invalid date");
            }
        }
        public int getYear()
        {
            return year;
        }
        public int getMonth()
        {
            return month;
        }
        public int getDay()
        {
            return day;
        }

        public void setYear(int year)
        {
            this.year = year;
        }

        public void setMonth(int month)
        {
            this.month = month;
        }

        public void setDay(int day)
        {
            this.day = day;
        }
        public override string ToString()
        {
            return $"{MONTHS[month - 1]} {day}, {year}";

        }

        public MyDate nextDay()
        {
            DateTime currentDate = new DateTime(year, month, day);
            currentDate = currentDate.AddDays(1);
            setDate(currentDate.Year, currentDate.Month, currentDate.Day);
            return this;
        }

        public MyDate nextMonth()
        {
            int newMonth = month + 1;
            int newYear = year;
            if (newMonth > 12) ;
            {
                newMonth = 1;
                newYear++;
            }
            setDate(newYear, newMonth, day);
            return this;
        }

        public MyDate nextYear()
        {
            setDate(year + 1, month, day);
            return this;
        }

        public MyDate previousDay()
        {
            DateTime currentDate = new DateTime(year, month, day);
            currentDate = currentDate.AddDays(-1);
            setDate(currentDate.Year, currentDate.Month, currentDate.Day);
            return this;
        }

        public MyDate previousMonth()
        {
            int newMonth = month - 1;
            int newYear = year;
            if (newMonth < 1)
            {

                newMonth = 12;
                newYear--;
            }
            setDate(newYear, newMonth, day);
            return this;
        }

        public MyDate previousYear()
        {
            setDate(year - 1, month, day);
            return this;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            MyDate date = new MyDate(2023, 8, 31);
            Console.WriteLine("Current date: " + date);

            MyDate nextDay = date.nextDay();
            Console.WriteLine("Next day: " + nextDay);

            MyDate nextMonth = date.nextMonth();
            Console.WriteLine("Next month: " + nextMonth);

            MyDate nextYear = date.nextYear();
            Console.WriteLine("Next year: " + nextYear);
        }
    }
  */


//4th program
public class Ball
    {
        private float x;
        private float y;
        private int radius;
        private float XDelta;
        private float YDelta;

        public Ball(float x, float y, int radius, int speed, int direction)
        {
            this.x = x;
            this.y = y;
            this.radius = radius;
            this.XDelta = speed * (float)Math.Cos(direction);
            this.YDelta = -speed * (float)Math.Sin(direction);
        }

        public float getx()
        {
            return x;
        }

        public void setx(float x)
        {
            this.x = x;
        }

        public float gety()
        {
            return y;
        }

        public void sety(float y)
        {
            this.y = y;
        }

        public int getRadius()
        {
            return radius;
        }

        public void setRadius(int radius)
        {
            this.radius = radius;
        }

        public float getXDelta()
        {
            return XDelta;
        }

        public void setXDelta(float XDelta)
        {
            this.XDelta = XDelta;
        }

        public float getYDelta()
        {
            return YDelta;
        }

        public void setYDelta(float YDelta)
        {
            this.YDelta = YDelta;
        }

        public void move()
        {
            x += XDelta;
            y += YDelta;
        }

        public void reflectHorizontal()
        {
            XDelta = -XDelta;
        }

        public void reflectVertical()
        {
            YDelta = -YDelta;
        }

        public override string ToString()
        {
            return $"Ball: (x={x}, y={y}), Radius={radius}";
        }
    }
    public class Container
    {
        private int x1;
        private int y1;
        private int x2;
        private int y2;

        public Container(int x, int y, int width, int height)
        {
            x1 = x;
            y1 = y;
            x2 = x + width;
            y2 = y + height;
        }
        public int getX()
        {
            return x1;
        }
        public int getY()
        {
            return y1;
        }
        public int getWidth()
        {
            return x2 - x1;
        }
        public int getHeight()
        {
            return y2 - y1;
        }

        public bool collides(Ball ball)
        {
            float ballX = ball.getx();
            float ballY = ball.gety();
            int ballRadius = ball.getRadius();

            return ballX - ballRadius >= x1 &&
                   ballX + ballRadius <= x2 &&
                   ballY - ballRadius >= y1 &&
                   ballY + ballRadius <= y2;
        }

        public override string ToString()
        {
            return $"Container: (x1={x1}, y1={y1}), (x2={x2}, y2={y2}), Width={getWidth()}, Height={getHeight()}";
        }


        class Program
        {
            static void Main(string[] args)
            {
                Ball ball = new Ball(10, 20, 5, 3, 45);
                Console.WriteLine("Initial ball: " + ball);

                ball.move();
                Console.WriteLine("After moving: " + ball);

                ball.reflectHorizontal();
                Console.WriteLine("After reflecting horizontally: " + ball);

                ball.reflectVertical();
                Console.WriteLine("After reflecting vertically: " + ball);

                Container container = new Container(0, 0, 20, 15);
                Console.WriteLine("Container: " + container);

                Ball ball1 = new Ball(10, 10, 5, 3, 45);
                Ball ball2 = new Ball(5, 5, 3, 2, 60);

                Console.WriteLine("Does ball1 collide with container? " + container.collides(ball1));
                Console.WriteLine("Does ball2 collide with container? " + container.collides(ball2));
            }
        }
    }


    public class Circle
    {
        public double radius;
        public string color;

        public Circle()
        {
            radius = 1.0;
            color = "red";
        }

        public Circle(double radius)
        {
            this.radius = radius;
            color = "red";
        }

        public Circle(double radius, string color)
        {
            this.radius = radius;
            this.color = color;
        }

        public double Radius
        {
            get { return radius; }
            set { radius = value; }
        }

        public string Color
        {
            get { return color; }
            set { color = value; }
        }

        public double getArea()
        {
            return (Math.PI * radius * radius);
        }

        public void toString()
        {
            Console.WriteLine("Radius=${radius}");
            Console.WriteLine("Color=${color}");
            double a = getArea();
            Console.WriteLine("Area=${a}");
        }
    }



    class Cylinder : Circle
    {
        public double height;

        public Cylinder() : base()
        {
            height = 1.0;
        }

        public Cylinder(double radius) : base()
        {
            base.radius = this.radius;
        }

        public Cylinder(double radius, double height) : base(radius)
        {
            this.height = height;
            //base.radius = radius;
        }

        public Cylinder(double radius, double height, string color) : base(radius, color)
        {
            //base.radius= radius;
            //base.color= color;
            this.height = height;
        }

        public double Height
        {
            get { return height; }
            set { height = value; }
        }

        public double getVolume()
        {
            return (Math.PI * radius * radius * height);
        }
    }

    class TestCylinder
    {
        public static void Main(string[] args)
        {
            Cylinder c1 = new Cylinder();
            Console.WriteLine("Cylinder: \n radius=" + c1.Radius + "\n Height=" + c1.Height + " \n Area=" + (c1.getArea()) + "\n Volume=" + (c1.getVolume()));

            Cylinder c2 = new Cylinder(10.0);
            Console.WriteLine("Cylinder: \n radius=" + c2.Radius + "\n Height=" + c2.Height + "\n Area=" + (c2.getArea()) + "\n Volume=" + (c2.getVolume()));

            Cylinder c3 = new Cylinder(2.0, 10.0);
            Console.WriteLine("Cylinder: \n radius=" + c3.Radius + "\n Height=" + c3.Height + "\n Area=" + (c3.getArea()) + "\n Volume=" + (c3.getVolume()));

        }
    }
    public class Person
    {
        public string name;
        public string address;

        public Person(string name, string address)
        {
            this.name = name;
            this.address = address;
        }

        public string Name { get { return name; } }
        public string Address
        {
            get { return address; }
            set { address = value; }
        }

        public void toString()
        {
            Console.WriteLine("Name:" + name);
            Console.WriteLine("Address:" + address);
        }
    }

    public class Student : Person
    {
        string program;
        int year;
        double fee;

        public Student(string name, string address, string program, int year, double fee) : base(name, address)
        {
            this.program = program;
            this.year = year;
            this.fee = fee;
        }

        public string Program
        {
            get { return program; }
            set { program = value; }
        }

        public int Year
        {
            get { return year; }
            set { year = value; }
        }

        public double Fee
        {
            get { return fee; }
            set { fee = value; }
        }

        public new string toString()
        {
            base.toString();
            Console.WriteLine("Program=" + program + "\n year=" + year + "\n Fee=" + fee);
            return ("");
        }

    }

    public class Staff : Person
    {
        string school;
        double pay;

        public Staff(string name, string address, string school, double pay) : base(name, address)
        {
            this.school = school;
            this.pay = pay;
        }

        public string School
        {
            get { return school; }
            set { school = value; }
        }

        public double Pay
        {
            get { return pay; }
            set { pay = value; }
        }

        public new string toString()
        {
            base.toString();
            Console.WriteLine("School=" + school + "\n Pay=" + pay);
            return ("");
        }
    }

    public class Show
    {
        public static void Main(string[] args)
        {
            Student ob = new Student("XYZ", "lucknow", "BCA", 3, 30000.0);
            Console.WriteLine("Student Data:");
            ob.toString();

            Staff ob1 = new Staff("ABC", "Lucknow", "NPGC", 50000.0);
            Console.WriteLine("Staff Data:");
            ob1.toString();
        }
    }
    public class Point2D
    {
        public float x, y;
        //loat[] xy = new float[2];


        public Point2D()
        {
            x = 0.0f;
            y = 0.0f;
        }

        public Point2D(float x, float y)
        {
            this.x = x;
            this.y = y;
        }

        public float X
        {
            get { return x; }
            set { x = value; }
        }

        public float Y
        {
            get { return y; }
            set { y = value; }
        }

        /*public float XY
          {

              get
              { return xy; }
              set
              {

                  xy[0] = x;
                  xy[1] = y;
              }

          }*/

        public string toString()
        {
            Console.WriteLine("x=" + x + "\n y=" + y);
            return ("");
        }
    }

    public class Point3D : Point2D
    {
        float z;
        //loat[] xyz = new float[3];
        public Point3D() : base()
        {
            z = 0.0f;
        }

        public Point3D(float x, float y, float z) : base(x, y)
        {
            this.z = z;
        }

        public float Z
        {
            get { return z; }
            set { z = value; }
        }



        public new string toString()
        {
            //  base.ToString();
            Console.WriteLine("x=" + base.x + "y=" + base.y);
            Console.WriteLine("z=" + z);
            return ("");
        }
    }

    public class show
    {
        public static void Main(string[] args)
        {
            Point3D ob = new Point3D(2.4f, 3.1f, 1.2f);
            ob.toString();
        }
    }


    public class Point
    {
        public float x;
        public float y;

        public Point()
        {
            x = 0.0f;
            y = 0.0f;
        }

        public Point(float x, float y)
        {
            this.x = x;
            this.y = y;
        }

        public float X
        {
            get { return x; }
            set { x = value; }
        }

        public float Y
        {
            get { return y; }
            set { y = value; }
        }

        public string toString()
        {
            Console.WriteLine("(x,y)={0},{1}" + x, y);
            return "";
        }
    }


    public class MovablePoint : Point
    {
        float xspeed, yspeed;
        public MovablePoint() : base()
        {
            xspeed = 0.0f;
            yspeed = 0.0f;
        }

        public MovablePoint(float x, float y, float xspeed, float yspeed) : base(x, y)
        {
            this.xspeed = xspeed;
            this.yspeed = yspeed;
        }

        public float Xspeed
        {
            get { return xspeed; }
            set { xspeed = value; }
        }

        public float Yspeed
        {
            get { return yspeed; }
            set { yspeed = value; }
        }

        public new string toString()
        {
            Console.WriteLine("(x,y)={0},{1}" + x, y);
            Console.WriteLine("speed={0},{1}" + xspeed, yspeed);
            return "";
        }

        public MovablePoint move()
        {
            base.x += xspeed;
            base.y += yspeed;
            return this;
        }
    }

    public class XY
    {
        public static void Main(string[] arge)
        {
            MovablePoint ob = new MovablePoint(2.3f, 1.2f, 40.0f, 35.0f);
            ob = ob.move();
            Console.WriteLine(ob.toString());

        }
    }

    public class Shape
    {
        string color;
        Boolean filled;
        public Shape()
        {
            color = "red";
            filled = true;
        }

        public Shape(string color, Boolean filled)
        {
            this.color = color;
            this.filled = filled;
        }

        public string Color
        {
            get { return color; }
            set { color = value; }
        }

        public Boolean Filled
        {
            get { return filled; }
            set { filled = value; }
        }

        public string toString()
        {
            Console.WriteLine("Shape:\n Color=" + color + "Filled=" + filled);
            return "";
        }
    }

    /*public class Circle : Shape
    {
        double radius;

        public Circle() : base()
        {
            radius = 1.0;
        }

        public Circle(double radius) : base()
        {
            this.radius = radius;
        }

        public Circle(double radius, string color, Boolean filled) : base(color, filled)
        {
            this.radius = radius;
        }

        public double Radius
        {
            get { return radius; }
            set { radius = value; }
        }

        public double getArea()
        {
            return (Math.PI * radius * radius);
        }

        public string toString()
        {
            Console.WriteLine("Shape:\n Color=" + base.Color + "\nFilled=" + base.Filled);
            Console.WriteLine("radius=" + radius);
            return "";
        }
    }


    public class Rectangle : Shape
    {
        double width, length;
        public Rectangle() : base()
        {
            width = 1.0;
            length = 1.0;
        }

        public Rectangle(double width, double length) : base()
        {
            this.width = width;
            this.length = length;
        }

        public Rectangle(double width, double length, string color, Boolean filled) : base(color, filled)
        {
            this.width = width;
            this.length = length;
        }

        public double Width
        {
            get { return width; }
            set { width = value; }
        }

        public double Length
        {
            get { return length; }
            set { length = value; }
        }

        public double GetArea()
        {
            return (width * length);
        }

        public double getPerimeter()
        {
            return (2 * (width + length));
        }

        public string toString()
        {
            Console.WriteLine("Shape:\n Color=" + base.Color + "\nFilled=" + base.Filled);
            Console.WriteLine("length=" + length + "\n width=" + width);
            return "";
        }
    }

    public class Square : Rectangle
    {
        public Square() : base() { }
        public Square(double side) : base(side, side) { }
        public Square(double side, string color, Boolean filled) : base(side, side, color, filled) { }

        public double Side
        {
            set { Side = value; }
            get { return Side; }
        }

        public double Width
        {
            get { return base.Width; }
            set { base.Width = value; }
        }

        public double Length
        {
            get { return base.Length; }
            set { base.Length = value; }
        }

        public string ToString()
        {
            base.toString();
            Console.WriteLine("Area=" + GetArea());
            Console.WriteLine("Perimeter=" + getPerimeter());
            return "";
        }
    }

    public class Call
    {
        public static void Main(string[] args)
        {
            Circle ob = new Circle(2.3, "red", true);
            ob.ToString();
            Console.WriteLine("Area of Circle=" + ob.getArea());

            Rectangle ob1 = new Rectangle(2.3, 4.2, "yellow", false);
            ob.ToString();
            Console.WriteLine("Area of Rect=" + ob1.getArea());
            Console.WriteLine("Perimeter of Rect=" + ob1.getPerimeter());

            Square ob2 = new Square(1.5, "blue", true);
            ob2.toString();


        }
    }
}

    public class Animal
    {
        public string name;
        public Animal(string name)
        {
            this.name = name;
        }

        public string toString()
        {
            Console.WriteLine("Name=" + name);
            return "";
        }
    }

    public class Mammal : Animal
    {
        public Mammal(string name) : base(name) { }

        public override string ToString()
        {
            return base.ToString();
        }
    }

    public class Cat : Mammal
    {
        public Cat(string name) : base(name) { }
        public void greets()
        {
            Console.WriteLine("Meow");
        }

        public override string ToString()
        {
            return base.ToString();
        }
    }

    public class Dog : Mammal
    {
        public Dog(string name) : base(name) { }
        public void greets()
        {
            Console.WriteLine("Woof");
        }

        public void greets(Dog another)
        {
            Console.WriteLine("Woooof");
        }

        public override string ToString()
        {
            return base.ToString();
        }
    }

    public class Call
    {
        public static void Main(string[] args)
        {
            Cat ob = new Cat("Zoe");
            ob.greets();
            ob.toString();

            Dog ob1 = new Dog("Bam");
            Dog ob2 = new Dog("tom");
            ob1.greets();
            ob1.greets(ob2);
            ob1.ToString();
        }
    }
    */










    /* interface Movable
     {
        public  void MoveUp();
        public  void MoveDown();
        public void MoveLeft();
        public  void MoveRight();
     }
     class MovablePoint : Movable
     {
         public int x, y, xspeed, yspeed;
         public MovablePoint(int x,int y,int xspeed,int yspeed)
         {
             this.x = x;
             this.y = y;

             this.xspeed = xspeed;
             this.yspeed = yspeed;
         }
         public void MoveUp()
         {
             y -= yspeed;
         }
         public void MoveDown()
         {
             y -= yspeed;
         }
         public void MoveLeft()
         {
             x -= xspeed;
         }
         public void MoveRight()
         {
             x += xspeed;
         }
         static void Main()
         {
             MovablePoint m = new MovablePoint(0, 0, 10, 20);
             m.MoveUp();
             Console.WriteLine(m.x + "  " + m.y);
             m.MoveDown();
             Console.WriteLine(m.x + "  " + m.y);
             m.MoveLeft();
             Console.WriteLine(m.x + "  " + m.y);
             m.MoveRight();
             Console.WriteLine(m.x+ "  "+m.y);

         }
     }
     class MovableCircle: Movable
     {
         public int radius;
         MovablePoint center;
         public MovableCircle()
         {
             radius = 10;
         }
          MovableCircle(int radius, int x, int y,int xspeed,int yspeed)
         {
             this.radius = radius;
             center.x = x;
             center.y = y;
             center.xspeed = xspeed;
             center.yspeed = yspeed;
         }
         public void MoveUp()
         {

         }
         public void MoveDown()
         {

         }
         public void MoveLeft()
         {

         }
         public void MoveRight()
         {

         }
     }

    interface GeometricObject
     {
         public double getPerimeter();
         public double getArea();

     }
     class Circle:GeometricObject
     {
         protected double radius;
        public Circle(double radius)
         {
             this.radius = radius;
         }
        public  double getPerimeter()
         {
             return radius*2*3.14;
         }
         public double getArea()
         {
             return 3.14 * radius * radius;
         }
     }
     interface Resizable
     {
         public void resize(int percent);
     }
     class ResizableCircle: Circle, Resizable
     { 
         public ResizableCircle(double radius):base(radius)
         {
             this.radius = radius;

         }
         public void resize(int percent)
         {
             this.radius *= percent/100.0;
         }
         public static void Main()
         {
             ResizableCircle r = new ResizableCircle(15.0);
             Console.WriteLine(r.getPerimeter());
             Console.WriteLine(r.getArea());
             Console.WriteLine(r.radius);
             r.resize(50);
             Console.WriteLine("After resize "+r.radius);

         }
     }
    abstract class Animal
     {
         public  string name;
         public Animal(String name)
         {
             this.name = name;
         }
        public abstract void greets();

     }
     class Cat : Animal 
     {
         Cat(string name):base(name)
         {
             this.name = name;
         }
         public override void greets() 
         {
             Console.WriteLine("Meow");
         }
     }
     class Dog : Animal
     {
         public Dog(string name):base(name)
         {
             this.name=name;
         }
         public override void greets()
         {
             Console.WriteLine("Woof");
         }
         public void greets(Dog d)
         {
             Console.WriteLine("wooooof");
             d.greets();
         }
     }
     class BigDog:Dog
     {
         BigDog(string name):base(name)
         {
             this.name = name;
         }

         public override void greets()
         {
             Console.WriteLine("WOOW");
         }
         protected void greets(Dog a)
         {
             a.greets();
             Console.WriteLine("WOOOOOOW");
         }
         public void greets(BigDog a)
         {
             Console.WriteLine("woooooooooooooow");
             a.greets(); 
         }
     }

     class Customer:DiscountRate
     {
         public string name;
         bool member;
         string memberType;
         public Customer(string name)
         {
             this.name = name;
             this.member = false;
         }
         string getName()
         {
             return name;
         }
         bool isMember()
         {
             return member;
         }
         public string getMemberType()
         {
             return memberType;
         }
         void setMember(bool member)
         {
             this.member = member;
         }
         void setMemberType(string memberType)
         { this.memberType = memberType; }
     }
     class Visit : Customer
     {
         Customer customer;
         DateOnly date;
         double serviceExpense,productExpense;
         public Visit(string name,DateOnly date):base(name)
         {
             this.customer = new Customer(name);
             this.date = date;
         }
         string getName()
         {
             return customer.name;
         }
         double getServiceExpense()
         {
             return serviceExpense;
         }
         double getProductExpense()
         {
             return productExpense;
         }
         void setServiceExpense(double ex)
         {
             serviceExpense=ex;
         }
         void setProductExpense(double productExpense)
         {
             this.productExpense=productExpense;
         }
         double getTotalExpense()
         {
             return serviceExpense + productExpense;
         }
         public static void Main()
         {
             Console.WriteLine("Enter name");
             string n=Console.ReadLine();
             Visit v=new Visit(n,new DateOnly() );
             v.setProductExpense(5*400);
             v.setServiceExpense(2*343);
             Console.WriteLine(v.getTotalExpense());
         }
     }*/
    /*
     class DiscountRate
     {
        static double serviceDiscountPremium = 0.2;
         static double serviceDiscountGold = 0.15;
         static double serviceDiscountSilver= 0.1;
         static double productDiscountPremium = 0.1;
         static double productDiscountGold= 0.1;
         static double productDiscountSilver = 0.1;

         double getServiceDiscountRate()
         { return serviceDiscountPremium; }
         public static double getProductDiscountRate() {  return productDiscountGold; }
     }

    class Point
    {
        int x, y;
        public Point(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
        public int getX()
        {
            return x;
        }
        public int getY()
        {
            return y;
        }
        public void setX(int x)
        {
            this.x = x;
        }
        public void setY(int y)
        {
            this.y = y;
        }
    }
    class PolyLine:Point
    {
        List <Point> points;
        PolyLine():base(4,8)
        {
            points = new List <Point>();
        }
        void appendPoint(int x, int y)
        {
            points.Add (new Point (x, y));
        }
        void appendPoint(Point point)
        {
            points.Add (point);
        }
        int getLength()
        {
            return points.Count;
        }
        public string ToString()
        {
            string s = "";
            foreach(Point p in points)
            {
                s=s+"{"+p.getX()+","+p.getY()+"}";
                s = s + "\t";
            }
            return s;
        }

        public static void Main()
        {
            // Test default constructor and toString()
            PolyLine l1 = new PolyLine();
            Console.WriteLine(l1.ToString());  // {}

            // Test appendPoint()
            l1.appendPoint(new Point(1, 2));
            l1.appendPoint(3, 4);
            l1.appendPoint(5, 6);
            Console.WriteLine(l1.ToString());  // {(1,2)(3,4)(5,6)}

        }
    }*/
    class MyIntStack
    {
        private int[] contents;
        private int tos;  // Top of the stack

        // constructors
        public MyIntStack(int capacity)
        {
            contents = new int[capacity];
            tos = -1;
        }

        public void push(int element)
        {
            if (isFull())
                Console.WriteLine("Full");
            else
                contents[++tos] = element;
        }

        public int pop()
        {
            if (isEmpty())
                return tos;
            return contents[tos--];
        }

        public int peek()
        {
            return contents[tos];
        }

        public bool isEmpty()
        {
            return tos < 0;
        }

        public bool isFull()
        {
            return tos == contents.Length - 1;
        }
        public static void Main()
        {
            MyIntStack m = new MyIntStack(5);
            m.push(12);
            m.push(-12);
            m.push(90);
            m.push(67);
            m.push(655);
            Console.WriteLine(m.pop());
        }

    }
}

